package com.notification.metrics;

import com.notification.service.EnhancedNotificationService;
import com.notification.service.NotificationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * 监控装饰器
 * 为通知服务添加指标收集功能
 */
public class MonitoredNotificationService implements EnhancedNotificationService {
    
    private static final Logger logger = LoggerFactory.getLogger(MonitoredNotificationService.class);
    
    private final NotificationService delegate;\n    private final String serviceName;\n    private final NotificationMetrics metrics;\n    \n    public MonitoredNotificationService(NotificationService delegate, String serviceName) {\n        this.delegate = delegate;\n        this.serviceName = serviceName;\n        this.metrics = NotificationMetrics.getInstance();\n    }\n    \n    @Override\n    public boolean sendNotification(String message, String title) {\n        return executeWithMetrics(\n            () -> delegate.sendNotification(message, title),\n            \"NORMAL\",\n            \"sendNotification\"\n        );\n    }\n    \n    @Override\n    public boolean sendTaskCompletionNotification(String taskName, String status, long duration) {\n        return executeWithMetrics(\n            () -> delegate.sendTaskCompletionNotification(taskName, status, duration),\n            \"NORMAL\",\n            \"sendTaskCompletionNotification\"\n        );\n    }\n    \n    @Override\n    public boolean sendErrorNotification(String taskName, String errorMessage) {\n        return executeWithMetrics(\n            () -> delegate.sendErrorNotification(taskName, errorMessage),\n            \"HIGH\", // 错误通知默认为高优先级\n            \"sendErrorNotification\"\n        );\n    }\n    \n    @Override\n    public CompletableFuture<SendResult> sendNotificationAsync(NotificationMessage message) {\n        return CompletableFuture.supplyAsync(() -> {\n            long startTime = System.currentTimeMillis();\n            try {\n                boolean success;\n                if (delegate instanceof EnhancedNotificationService) {\n                    SendResult result = ((EnhancedNotificationService) delegate).sendNotificationAsync(message).get();\n                    success = result.isSuccess();\n                    recordMetrics(success, result.getDuration(), message.getPriority().name(), \n                                result.getErrorMessage(), \"sendNotificationAsync\");\n                    return result;\n                } else {\n                    success = delegate.sendNotification(message.getContent(), message.getTitle());\n                    long duration = System.currentTimeMillis() - startTime;\n                    recordMetrics(success, duration, message.getPriority().name(), \n                                success ? null : \"发送失败\", \"sendNotificationAsync\");\n                    return new SendResult(success, message.getMessageId(), \n                                        success ? null : \"发送失败\", duration);\n                }\n            } catch (Exception e) {\n                long duration = System.currentTimeMillis() - startTime;\n                recordMetrics(false, duration, message.getPriority().name(), \n                            e.getMessage(), \"sendNotificationAsync\");\n                return new SendResult(false, message.getMessageId(), e.getMessage(), duration);\n            }\n        });\n    }\n    \n    @Override\n    public CompletableFuture<SendResult> sendNotificationAsync(String message, String title, Priority priority) {\n        NotificationMessage msg = new NotificationMessage(title, message, priority);\n        return sendNotificationAsync(msg);\n    }\n    \n    @Override\n    public List<SendResult> sendBatchNotifications(List<NotificationMessage> messages) {\n        long startTime = System.currentTimeMillis();\n        try {\n            List<SendResult> results;\n            if (delegate instanceof EnhancedNotificationService) {\n                results = ((EnhancedNotificationService) delegate).sendBatchNotifications(messages);\n            } else {\n                results = messages.stream()\n                        .map(msg -> {\n                            long msgStartTime = System.currentTimeMillis();\n                            boolean success = delegate.sendNotification(msg.getContent(), msg.getTitle());\n                            long msgDuration = System.currentTimeMillis() - msgStartTime;\n                            return new SendResult(success, msg.getMessageId(), \n                                                success ? null : \"发送失败\", msgDuration);\n                        })\n                        .collect(java.util.stream.Collectors.toList());\n            }\n            \n            // 批量记录指标\n            for (int i = 0; i < results.size(); i++) {\n                SendResult result = results.get(i);\n                NotificationMessage msg = messages.get(i);\n                recordMetrics(result.isSuccess(), result.getDuration(), msg.getPriority().name(),\n                            result.getErrorMessage(), \"sendBatchNotifications\");\n            }\n            \n            return results;\n        } catch (Exception e) {\n            long duration = System.currentTimeMillis() - startTime;\n            // 为每个消息记录失败指标\n            for (NotificationMessage msg : messages) {\n                recordMetrics(false, duration / messages.size(), msg.getPriority().name(),\n                            e.getMessage(), \"sendBatchNotifications\");\n            }\n            throw e;\n        }\n    }\n    \n    @Override\n    public CompletableFuture<List<SendResult>> sendBatchNotificationsAsync(List<NotificationMessage> messages) {\n        return CompletableFuture.supplyAsync(() -> sendBatchNotifications(messages));\n    }\n    \n    @Override\n    public boolean sendNotificationWithPriority(String message, String title, Priority priority) {\n        return executeWithMetrics(\n            () -> {\n                if (delegate instanceof EnhancedNotificationService) {\n                    return ((EnhancedNotificationService) delegate).sendNotificationWithPriority(message, title, priority);\n                } else {\n                    return delegate.sendNotification(message, title);\n                }\n            },\n            priority.name(),\n            \"sendNotificationWithPriority\"\n        );\n    }\n    \n    @Override\n    public boolean sendTaskCompletionNotification(String taskName, String status, long duration, Priority priority) {\n        return executeWithMetrics(\n            () -> {\n                if (delegate instanceof EnhancedNotificationService) {\n                    return ((EnhancedNotificationService) delegate).sendTaskCompletionNotification(taskName, status, duration, priority);\n                } else {\n                    return delegate.sendTaskCompletionNotification(taskName, status, duration);\n                }\n            },\n            priority.name(),\n            \"sendTaskCompletionNotification\"\n        );\n    }\n    \n    @Override\n    public CompletableFuture<SendResult> sendDelayedNotification(String message, String title, long delayMillis) {\n        if (delegate instanceof EnhancedNotificationService) {\n            return ((EnhancedNotificationService) delegate).sendDelayedNotification(message, title, delayMillis)\n                    .whenComplete((result, throwable) -> {\n                        if (throwable == null) {\n                            recordMetrics(result.isSuccess(), result.getDuration(), \"NORMAL\",\n                                        result.getErrorMessage(), \"sendDelayedNotification\");\n                        } else {\n                            recordMetrics(false, 0, \"NORMAL\", throwable.getMessage(), \"sendDelayedNotification\");\n                        }\n                    });\n        } else {\n            return CompletableFuture.supplyAsync(() -> {\n                try {\n                    Thread.sleep(delayMillis);\n                    long startTime = System.currentTimeMillis();\n                    boolean success = delegate.sendNotification(message, title);\n                    long duration = System.currentTimeMillis() - startTime;\n                    String messageId = \"delayed_\" + System.currentTimeMillis();\n                    recordMetrics(success, duration, \"NORMAL\", \n                                success ? null : \"延迟发送失败\", \"sendDelayedNotification\");\n                    return new SendResult(success, messageId, success ? null : \"延迟发送失败\", duration);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    recordMetrics(false, 0, \"NORMAL\", \"延迟发送被中断\", \"sendDelayedNotification\");\n                    return new SendResult(false, \"delayed_\" + System.currentTimeMillis(), \"延迟发送被中断\", 0);\n                }\n            });\n        }\n    }\n    \n    @Override\n    public CompletableFuture<SendResult> sendScheduledNotification(String message, String title, long scheduleTime) {\n        long delay = scheduleTime - System.currentTimeMillis();\n        if (delay <= 0) {\n            return sendNotificationAsync(message, title, Priority.NORMAL);\n        }\n        return sendDelayedNotification(message, title, delay);\n    }\n    \n    @Override\n    public String getServiceStatus() {\n        String delegateStatus = \"\";\n        if (delegate instanceof EnhancedNotificationService) {\n            delegateStatus = ((EnhancedNotificationService) delegate).getServiceStatus();\n        } else {\n            delegateStatus = delegate.getClass().getSimpleName();\n        }\n        \n        // 添加监控状态信息\n        NotificationMetrics.ServiceMetrics serviceMetrics = metrics.getServiceStats(serviceName);\n        if (serviceMetrics != null) {\n            return String.format(\"MonitoredService[name=%s, delegate=%s, requests=%d, successRate=%.2f%%]\",\n                               serviceName, delegateStatus, serviceMetrics.getTotalRequests(), serviceMetrics.getSuccessRate());\n        } else {\n            return String.format(\"MonitoredService[name=%s, delegate=%s, noMetrics]\", serviceName, delegateStatus);\n        }\n    }\n    \n    @Override\n    public boolean testConnection() {\n        return executeWithMetrics(\n            () -> {\n                if (delegate instanceof EnhancedNotificationService) {\n                    return ((EnhancedNotificationService) delegate).testConnection();\n                } else {\n                    return delegate.sendNotification(\"连接测试\", \"系统测试\");\n                }\n            },\n            \"NORMAL\",\n            \"testConnection\"\n        );\n    }\n    \n    /**\n     * 执行操作并记录指标\n     * @param operation 操作\n     * @param priority 优先级\n     * @param operationName 操作名称\n     * @return 执行结果\n     */\n    private boolean executeWithMetrics(java.util.function.Supplier<Boolean> operation, \n                                     String priority, String operationName) {\n        long startTime = System.currentTimeMillis();\n        try {\n            boolean success = operation.get();\n            long duration = System.currentTimeMillis() - startTime;\n            recordMetrics(success, duration, priority, success ? null : \"操作失败\", operationName);\n            return success;\n        } catch (Exception e) {\n            long duration = System.currentTimeMillis() - startTime;\n            recordMetrics(false, duration, priority, e.getMessage(), operationName);\n            logger.error(\"执行操作异常: {} - 服务: {}\", operationName, serviceName, e);\n            throw e;\n        }\n    }\n    \n    /**\n     * 记录指标\n     * @param success 是否成功\n     * @param duration 持续时间\n     * @param priority 优先级\n     * @param errorMessage 错误信息\n     * @param operationName 操作名称\n     */\n    private void recordMetrics(boolean success, long duration, String priority, \n                             String errorMessage, String operationName) {\n        try {\n            metrics.recordRequest(serviceName, success, duration, priority, errorMessage);\n            \n            if (logger.isDebugEnabled()) {\n                logger.debug(\"记录指标 - 服务: {}, 操作: {}, 成功: {}, 耗时: {}ms, 优先级: {}\", \n                           serviceName, operationName, success, duration, priority);\n            }\n        } catch (Exception e) {\n            logger.warn(\"记录指标异常 - 服务: {}\", serviceName, e);\n        }\n    }\n    \n    /**\n     * 获取服务统计信息\n     * @return 服务统计\n     */\n    public NotificationMetrics.ServiceMetrics getMetrics() {\n        return metrics.getServiceStats(serviceName);\n    }\n    \n    /**\n     * 获取服务名称\n     * @return 服务名称\n     */\n    public String getServiceName() {\n        return serviceName;\n    }\n}